//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

	public Integer num1,num2,num3 ;
	public boolean label_for_stmt ;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
      {
      	if(label_for_stmt)System.out.println(((Label)(n.node)).f0.tokenImage+":") ;
        return n.node.accept(this,argu);
      }	
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println(".text") ;
      System.out.println(".globl main") ;
      System.out.println("main:") ;
      num1 = (Integer)(Integer.parseInt(n.f2.f0.tokenImage)) ;
      num2 = (Integer)(Integer.parseInt(n.f5.f0.tokenImage)) ;
      num3 = (Integer)(Integer.parseInt(n.f8.f0.tokenImage)) ;

      Integer offset ;

      System.out.println("move $fp , $sp"); // set new fp w/o storing
      System.out.println("sw $ra , -4($fp)") ; // save ra
      if(num3 >= 5)
      	offset = (4*((num3+num2-4) + 1)) ; // ra + max_args-4 of any call made by main
      else
      	offset = 4*(num2+1) ; // ra

      System.out.println("subu $sp, $sp, "+offset) ; // give space

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      System.out.println("lw $ra , -4($fp)") ; // restore ra
      System.out.println("addu $sp, $sp, "+offset) ; // clear stk
      System.out.println("j $ra"); // jump to ra

      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

      System.out.println("_halloc:");
      System.out.println("li $v0, 9");
      System.out.println("syscall");
      System.out.println("j $ra");

      System.out.println("_print:\nli $v0, 1\nsyscall\nla $a0, newl\nli $v0, 4\nsyscall\nj $ra");
      System.out.println(".data\n.align 0");
      System.out.println("newl:\n.asciiz \"\\n\" ") ;
      System.out.println(".data\n.align 0");
      System.out.println("str_er:\n.asciiz \" ERROR \\n \"");



      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      label_for_stmt = true ;
      n.f0.accept(this, argu);
      label_for_stmt = false ;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      System.out.println(".text") ;
      System.out.println(".globl "+(String)n.f0.accept(this, argu)) ;
      System.out.println((String)n.f0.accept(this, argu)+":") ;

      num1 = (Integer)(Integer.parseInt(n.f2.f0.tokenImage)) ;
      num2 = (Integer)(Integer.parseInt(n.f5.f0.tokenImage)) ;
      num3 = (Integer)(Integer.parseInt(n.f8.f0.tokenImage)) ;

      System.out.println("sw $fp, -8($sp)") ; // store fp
      System.out.println("sw $ra, -4($sp)") ; // store ra
      System.out.println("move $fp, $sp"); // set new fp 

      Integer offset = num2 + 2 ;  // 2 for fp  and ra
      if (num3 >= 5)offset = offset +  (num3 - 4) ;	 // if max args of any call within this function is >= 5 include space for it
      offset = offset * 4 ;

      System.out.println("subu $sp, $sp, "+offset); // give space for 1. 2nd num , 2. fp , ra  3. (max args-4) of any call within this function if >= 5
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      System.out.println("lw $ra, -4($fp)") ; // restore ra
      System.out.println("lw $fp, "+(offset-8)+"($sp)") ; // restore fp
      System.out.println("addu $sp, $sp, "+offset); // clear stack
      System.out.println("j $ra") ; // jump to ra
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      // System.out.println("error");
      System.out.println("li $v0, 4\nla $a0, str_er\nsyscall\nli $v0, 10\nsyscall") ;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("beqz "+(String)n.f1.accept(this, argu)+" "+n.f2.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("b "+n.f1.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println("sw "+(String)n.f3.accept(this, argu)+", "+n.f2.f0.tokenImage+"("+(String)n.f1.accept(this, argu)+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println("lw "+(String)n.f1.accept(this, argu)+", "+n.f3.f0.tokenImage+"("+(String)n.f2.accept(this, argu)+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu); 

      //hallocate
      if(n.f2.f0.which == 0)
      {
      	n.f2.accept(this,argu) ;
      	System.out.println("move "+reg+", $v0");      
      }
      //simple-exp
      else if(n.f2.f0.which == 2)
      {
      	// reg
      	if(((SimpleExp)(n.f2.f0.choice)).f0.which == 0)System.out.println("move "+reg+", "+(String)n.f2.accept(this, argu));
      	//integer
      	else if(((SimpleExp)(n.f2.f0.choice)).f0.which == 1)System.out.println("li "+reg+", "+(String)n.f2.accept(this, argu));
      	//label
      	else if(((SimpleExp)(n.f2.f0.choice)).f0.which == 2)System.out.println("la "+reg+", "+(String)n.f2.accept(this, argu));
      }
      //binop
      else if(n.f2.f0.which == 1)
      {
      	String binop_string = (String)n.f2.accept(this, argu) ;
      	int operator_option = ((BinOp)(n.f2.f0.choice)).f0.f0.which ;
      	String op = "";
      	if(operator_option == 0)op = "sle" ;
      	else if(operator_option == 1)op = "sne" ;
      	else if(operator_option == 2)op = "add" ;
      	else if(operator_option == 3)op = "sub" ;
      	else if(operator_option == 4)op = "mul" ;
      	else if(operator_option == 5)op = "div" ;

      	System.out.println(op+" "+reg+", "+binop_string);
      }


      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(n.f1.f0.which == 0)System.out.println("move $a0, "+(String)n.f1.accept(this, argu)) ;
      else if(n.f1.f0.which == 1)System.out.println("li $a0, "+(String)n.f1.accept(this, argu)) ;
      else if(n.f1.f0.which == 2)System.out.println("la $a0, "+(String)n.f1.accept(this, argu)) ;   
      System.out.println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      Integer spill_num = (Integer)(Integer.parseInt(n.f2.f1.f0.tokenImage)) ;
      if(spill_num <= (num1 - 5) )
      {
      	System.out.println("lw "+(String)n.f1.accept(this, argu)+", "+(4*spill_num)+"($fp)") ;
      }
      else
      {
      	Integer offset = 0 ,off1 =0 ,off2 = 0;
      	if(num3 >= 5) off1 = num3 - 4; 
	      if(num1 >= 5)off2 = num1 - 4 ;

	      Integer actual_num = (spill_num - off2 + off1)*4 ;
	      System.out.println("lw "+(String)n.f1.accept(this, argu)+", "+actual_num+"($sp)") ;	
      }
      
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      Integer spill_num = (Integer)(Integer.parseInt(n.f1.f1.f0.tokenImage)) ;
      if(spill_num <= (num1 - 5) )
      {
      	System.out.println("sw "+(String)n.f2.accept(this, argu)+", "+(4*spill_num)+"($fp)") ;
      }
      else
      {
      	Integer offset = 0 ,off1 =0 ,off2 = 0;
      	if(num3 >= 5) off1 = num3 - 4; 
	      if(num1 >= 5)off2 = num1 - 4 ;

	      Integer actual_num = (spill_num - off2 + off1)*4 ;
	      System.out.println("sw "+(String)n.f2.accept(this, argu)+", "+actual_num+"($sp)") ;	
      }

      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer offset = ((Integer)(Integer.parseInt(n.f1.f0.tokenImage)) - 1) * 4;
      System.out.println("sw "+(String)n.f2.accept(this, argu)+", "+offset+"($sp)");


      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("jalr "+(String)n.f1.accept(this, argu));
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(n.f1.f0.which == 0)System.out.println("move $a0, "+(String)n.f1.accept(this, argu)) ;
      else if(n.f1.f0.which == 1)System.out.println("li $a0, "+(String)n.f1.accept(this, argu)) ;
      else if(n.f1.f0.which == 2)System.out.println("la $a0, "+(String)n.f1.accept(this, argu)) ;   
      System.out.println("jal _halloc");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);            

      return (R)((String)n.f1.accept(this, argu) + ", "+(String)n.f2.accept(this, argu));
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;      
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      String reg = "" ;
      if(n.f0.which == 0)reg="a0";
      if(n.f0.which == 1)reg="a1";
      if(n.f0.which == 2)reg="a2";
      if(n.f0.which == 3)reg="a3";
      if(n.f0.which == 4)reg="t0";
      if(n.f0.which == 5)reg="t1";
      if(n.f0.which == 6)reg="t2";
      if(n.f0.which == 7)reg="t3";
      if(n.f0.which == 8)reg="t4";
      if(n.f0.which == 9)reg="t5";
      if(n.f0.which == 10)reg="t6";
      if(n.f0.which == 11)reg="t7";
      if(n.f0.which == 12)reg="s0";
      if(n.f0.which == 13)reg="s1";
      if(n.f0.which == 14)reg="s2";
      if(n.f0.which == 15)reg="s3";
      if(n.f0.which == 16)reg="s4";
      if(n.f0.which == 17)reg="s5";
      if(n.f0.which == 18)reg="s6";
      if(n.f0.which == 19)reg="s7";
      if(n.f0.which == 20)reg="t8";
      if(n.f0.which == 21)reg="t9";
      if(n.f0.which == 22)reg="v0";
      if(n.f0.which == 23)reg="v1";
      return (R)("$"+reg);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
