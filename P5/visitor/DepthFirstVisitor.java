//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

  public HashMap<String,Integer> label_line = new HashMap<String,Integer>();   //TODO: label map for each procedure should be present
  public HashMap<String,Graph> graph_set = new HashMap<String,Graph>() ;
  public Graph graph ;
  public int line_number = 0 ;
  public boolean func_call = false ;
  public String curr_func ;

   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
      {
         GraphNode node = graph.line_node.get(line_number) ;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         {            
            if (func_call) 
            {
              node.use.add((Integer)(Integer.parseInt(((Temp)(e.nextElement())).f1.f0.tokenImage))) ;              
            }
            else
              e.nextElement().accept(this);
         }
      }
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
      {
          label_line.put((curr_func+((Label)(n.node)).f0.tokenImage) , line_number+1) ;
          // System.out.println((curr_func+((Label)(n.node)).f0.tokenImage)) ;
         n.node.accept(this);
      }
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public void visit(Goal n) {
      graph = new Graph() ; 
      graph.first_line = line_number + 1 ;     
      curr_func = "MAIN" ;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      graph.last_line = line_number ;
      graph_set.put("MAIN",graph) ;
      
      // for (Map.Entry<Integer,GraphNode> entry : graph_set.get("MAIN").line_node.entrySet() ) 
      // {
      //   System.out.println(entry.getKey()+": use : "+entry.getValue().use+"def :"+entry.getValue().def) ;        
      // }
      // System.out.println("Line span: "+graph.first_line+" "+graph.last_line) ;
      n.f3.accept(this);
      n.f4.accept(this);



      // for (Map.Entry<String,Integer> entry : label_line.entrySet() ) 
      // {
      //   System.out.println(entry.getKey()+" "+entry.getValue()) ; 
      // }

   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public void visit(StmtList n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public void visit(Procedure n) {
      graph = new Graph() ; 
      graph.first_line = line_number + 1 ;
      curr_func = n.f0.f0.tokenImage ;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      graph.last_line = line_number ;
      graph_set.put(n.f0.f0.tokenImage,graph) ;
      // for (Map.Entry<Integer,GraphNode> entry : graph_set.get(n.f0.f0.tokenImage).line_node.entrySet() ) 
      // {
      //   System.out.println(entry.getKey()+": use : "+entry.getValue().use+"def :"+entry.getValue().def) ;        
      // }
      // System.out.println("Line span: "+graph.first_line+" "+graph.last_line) ;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public void visit(Stmt n) {
      line_number++ ;
      graph.line_node.put(line_number,new GraphNode(line_number)) ;
      n.f0.accept(this);
   }

   /**
    * f0 -> "NOOP"
    */
   public void visit(NoOpStmt n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "ERROR"
    */
   public void visit(ErrorStmt n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public void visit(CJumpStmt n) {
      GraphNode node = graph.line_node.get(line_number) ;
      node.use.add((Integer)(Integer.parseInt(n.f1.f1.f0.tokenImage))) ;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public void visit(JumpStmt n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public void visit(HStoreStmt n) {
      GraphNode node = graph.line_node.get(line_number) ;
      node.use.add((Integer)(Integer.parseInt(n.f1.f1.f0.tokenImage))) ;
      node.use.add((Integer)(Integer.parseInt(n.f3.f1.f0.tokenImage))) ;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public void visit(HLoadStmt n) {
      GraphNode node = graph.line_node.get(line_number) ;
      node.def.add((Integer)(Integer.parseInt(n.f1.f1.f0.tokenImage))) ;
      node.use.add((Integer)(Integer.parseInt(n.f2.f1.f0.tokenImage))) ;      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public void visit(MoveStmt n) {
      GraphNode node = graph.line_node.get(line_number) ;
      node.def.add((Integer)(Integer.parseInt(n.f1.f1.f0.tokenImage))) ;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public void visit(PrintStmt n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public void visit(Exp n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public void visit(StmtExp n) {
      n.f0.accept(this);
      n.f1.accept(this);
      line_number++ ;
      graph.line_node.put(line_number,new GraphNode(line_number)) ;
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public void visit(Call n) {
      func_call = true ;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      func_call = false ;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public void visit(HAllocate n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public void visit(BinOp n) {
      GraphNode node = graph.line_node.get(line_number) ;
      node.use.add((Integer)(Integer.parseInt(n.f1.f1.f0.tokenImage))) ;
      n.f0.accept(this);
      n.f1.accept(this);      
      n.f2.accept(this);
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public void visit(Operator n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public void visit(SimpleExp n) {
      if(n.f0.which == 0)
      {
        GraphNode node = graph.line_node.get(line_number) ;
        node.use.add((Integer)(Integer.parseInt(((Temp)(n.f0.choice)).f1.f0.tokenImage))) ;
      }
      n.f0.accept(this);
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public void visit(Temp n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Label n) {
      n.f0.accept(this);
   }

}
