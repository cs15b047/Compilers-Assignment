//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   int counter = 2000 ;	
   // boolean label_flag = false ;
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {      	 
          e.nextElement().accept(this) ;
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      Vector<Integer> v = new Vector<Integer>() ;
      v.clear();
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {            
             Integer x = (Integer)(e.nextElement().accept(this)) ;
             if(x != null)
             	v.add(x) ;
            _count++;
         }
         Vector<Integer> v2 = new Vector<Integer>() ;
         v2.clear();
         v2.addAll(v);
         v.clear();
         return (R)v2;
      }
      else
         return (R)v;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
      {
      	System.out.println(((Label)(n.node)).f0.tokenImage) ;
      	return null ;
        // return n.node.accept(this);
      }
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f2.accept(this);
      System.out.println("MAIN") ;
      n.f1.accept(this);
      System.out.println("END") ;
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;       
      n.f1.accept(this);
      n.f3.accept(this);
      System.out.println(n.f0.f0.tokenImage+" [ "+n.f2.f0.tokenImage+" ]") ;      
      System.out.println("BEGIN");
      int ret_count = (int)(Integer)(n.f4.accept(this));
      System.out.println("RETURN TEMP "+(ret_count));
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      System.out.println("NOOP");
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      System.out.println("ERROR");
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      int ret_cnt1 = (int)(Integer)(n.f1.accept(this));
      System.out.println("CJUMP TEMP "+(ret_cnt1)+" "+(String)n.f2.f0.tokenImage);      
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("JUMP "+(String)n.f1.f0.tokenImage);      
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      int ret_cnt1 = (int)(Integer)(n.f1.accept(this));
      int ret_cnt2 = (int)(Integer)(n.f3.accept(this));      
      System.out.println("HSTORE TEMP "+(ret_cnt1)+" "+(String)n.f2.f0.tokenImage+" TEMP "+(ret_cnt2)) ;
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      int ret_cnt1 = (int)(Integer)(n.f1.accept(this));
      int ret_cnt2 = (int)(Integer)(n.f2.accept(this));
      n.f0.accept(this);
      System.out.println("HLOAD TEMP "+ret_cnt1+" TEMP "+(ret_cnt2)+" "+n.f3.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      int ret_cnt1 = (int)(Integer)(n.f1.accept(this));
      int ret_cnt2 = (int)(Integer)(n.f2.accept(this));
      n.f0.accept(this);
      System.out.println("MOVE TEMP "+ret_cnt1+" TEMP "+(ret_cnt2));      
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      int ret_cnt1 = (int)(Integer)(n.f1.accept(this));
      System.out.println("PRINT TEMP "+(ret_cnt1));
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n) {
      R _ret=null;      
      return n.f0.accept(this) ;      	                    
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      int ret_cnt1 = (int)(Integer)(n.f3.accept(this));
      n.f4.accept(this);
      return (R)(Integer)ret_cnt1;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      n.f0.accept(this);
      n.f2.accept(this);      
      n.f4.accept(this);
      int ret_cnt1 = (int)(Integer)(n.f1.accept(this)),ret_cnt=counter;counter++ ;
      Vector<Integer> local = new Vector<Integer>();
      local.addAll((Vector<Integer>)(n.f3.accept(this))) ;
      System.out.println("MOVE TEMP "+(ret_cnt)+" CALL TEMP "+(ret_cnt1)+" (");

	  if(!local.isEmpty())
	  {
	  	for (Integer cnt : local)
		{
			System.out.println("TEMP "+(cnt));
		}	   
	  }
	  local.clear();      

      System.out.println(")");
      return (R)(Integer)ret_cnt;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      int ret_cnt1 = (int)(Integer)(n.f1.accept(this));
      int ret_cnt = counter ;counter++ ;
      System.out.println("MOVE TEMP "+(ret_cnt)+" HALLOCATE TEMP "+ret_cnt1);
      return (R)(Integer)ret_cnt;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      int ret_cnt1 = (int)(Integer)(n.f1.accept(this));
      int ret_cnt2 = (int)(Integer)(n.f2.accept(this));     
      int ret_cnt = counter ;counter++ ;
      System.out.println("MOVE TEMP "+ret_cnt+" "+(String)n.f0.accept(this)+" TEMP "+(ret_cnt1)+" TEMP "+(ret_cnt2)) ;
      return (R)(Integer)ret_cnt;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=null;
      String x ="";
      if(n.f0.which == 0)x = "LE";
      else if(n.f0.which == 1)x = "NE" ;
      else if(n.f0.which == 2)x = "PLUS" ;
      else if(n.f0.which == 3)x = "MINUS" ;
      else if(n.f0.which == 4)x = "TIMES" ;
      else if(n.f0.which == 5)x = "DIV" ;
      return (R)x ;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;                 
      return (R)(Integer)(Integer.parseInt(n.f1.f0.tokenImage));
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      int ret_cnt = counter ;counter++;
      System.out.println("MOVE TEMP "+(ret_cnt)+" "+n.f0.tokenImage) ;
      return (R)(Integer)ret_cnt;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;      
      int ret_cnt = counter ;counter++;
      System.out.println("MOVE TEMP "+(ret_cnt)+" "+n.f0.tokenImage) ;
      return (R)(Integer)ret_cnt;
   }

}
