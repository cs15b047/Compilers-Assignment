//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    public SymbolTable st = new SymbolTable() ;
    public int counter = 200 ,label_counter = 0;
    String curr_class,curr_method ;

    //generates code for identifier in primary_expr
    public R Generate_id_code(String str,Integer lr)
    {
      ClassType a = st.table.get(curr_class);
      MType c = a.methods.get(curr_method);
      String typ = c.var_decl.get(str);
      //TODO:consider effect of multiple var with same name : same as symboltable --> vtable_fields remn

      //TODO : Some return value some return pointer
      //local var of method
      if(typ != null) 
      {
        Integer index = c.var_to_temp.get(str) ;
        System.out.println("TEMP "+index) ;
        return (R)new AbstractMap.SimpleEntry<String, Integer>(typ,1);
      }                   
      else
      {
        // formal arg of method
        if(c.formal_args_name.contains(str))
        {
          int index = c.formal_args_name.indexOf(str) ;
          System.out.println("TEMP "+(index+1)) ;
          return (R)new AbstractMap.SimpleEntry<String, Integer>(c.formal_args_type.get(index),2);
        }
        //check in vtable_fields
        else
        {
          Map.Entry<String,Integer> entry = a.vtable_fields.get(str) ;                   
          // System.out.println(entry);
          // calculate temp0 + offset(id)           
          System.out.println("BEGIN");
          if(lr == 0) //Lvalue
            System.out.println("MOVE TEMP "+counter+" PLUS TEMP 0 "+entry.getValue()) ;
          else  //rvalue
            System.out.println("HLOAD TEMP "+counter+" PLUS TEMP 0 "+entry.getValue()+" 0") ;
          System.out.println("RETURN TEMP "+counter);
          System.out.println("END");
          counter++ ;                  
          
          ClassType curr = a ;
          // System.out.println(curr.className) ;
          while(curr != null)
          {
            // System.out.println(curr.className) ;
            if(curr.declarations.get(str) != null)
            {
              // System.out.println("here") ;
              return (R)new AbstractMap.SimpleEntry<String, Integer>(curr.declarations.get(str),3);                   
            }
            if(curr.parent != null)
              curr = st.table.get(curr.parent) ;
            else curr = null ;
          }        
          return null ;          
        }           
      }      
    }






    public GJDepthFirst(SymbolTable s){
      this.st = s ;
    }


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("MAIN") ;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;      
      st.Generate_VTable() ;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      curr_class = n.f1.f0.tokenImage ;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      curr_class = null ;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      curr_class = n.f1.f0.tokenImage ;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      curr_class = null ;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      //mapping all local variables of method to fixed temporaries
      curr_method = n.f2.f0.tokenImage ;
      MType method = st.table.get(curr_class).methods.get(curr_method) ;
      method.var_to_temp = new HashMap<String,Integer>() ;
      for ( Map.Entry<String, String> entry : method.var_decl.entrySet()) {
        method.var_to_temp.put(entry.getKey(),counter) ;
        counter++ ;
      } 

      System.out.println(curr_class+"_"+curr_method+" [ "+(method.formal_args_name.size()+1)+" ] ");
      System.out.println("BEGIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      System.out.print("RETURN ");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("END");
      curr_method = null ;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
       
      /*
        move temp , addr of id
        hstore temp 0 expr/move temp,expr
      */        

      ClassType a = st.table.get(curr_class);
      MType c = a.methods.get(curr_method);
      String str = n.f0.f0.tokenImage ;
      String typ = c.var_decl.get(str);

      if(typ != null) 
      {
        Integer index = c.var_to_temp.get(str) ;
        System.out.print("MOVE TEMP "+index+" ") ;        
      }                   
      else
      {
        // formal arg of method
        if(c.formal_args_name.contains(str))
        {
          int index = c.formal_args_name.indexOf(str) ;
          System.out.print("MOVE TEMP "+(index+1)+" ") ;
        }
        //check in vtable_fields
        else
        {
          Map.Entry<String,Integer> entry = a.vtable_fields.get(str) ;                   
          // calculate temp0 + offset(id)           
          System.out.println("MOVE TEMP "+counter+" PLUS TEMP 0 "+entry.getValue());
          System.out.print("HSTORE TEMP "+counter+" 0 ");
          counter++ ;                                    
        }           
      } 
      
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("\n");
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      /*
        move temp , address of id
        move temp , (temp + 4*(expr1 + 1))   + 1 as arr size stored at 0th locn
        hstore temp ,0  <--  expr2
      */
      // System.out.println("arr_assignment");

      ClassType a = st.table.get(curr_class);
      MType c = a.methods.get(curr_method);
      String str = n.f0.f0.tokenImage ;
      String typ = c.var_decl.get(str);

      int counter1 = counter ;
      if(typ != null) 
      {
        Integer index = c.var_to_temp.get(str) ;
        System.out.println("MOVE TEMP "+counter1+" TEMP "+index) ;        
        System.out.print("MOVE TEMP "+(counter1)+" PLUS TEMP "+(counter1)+" TIMES 4 PLUS 1 ") ;
        counter++;
        n.f2.accept(this, argu); System.out.println("\n");
        System.out.print("HSTORE TEMP "+(counter1)+" 0 ");
        
      }                   
      else
      {
        // formal arg of method
        if(c.formal_args_name.contains(str))
        {
          int index = c.formal_args_name.indexOf(str) ;
          System.out.println("MOVE TEMP "+counter1+" TEMP "+(index+1)) ;
          System.out.println("MOVE TEMP "+(counter1)+" PLUS TEMP "+(counter1)+" TIMES 4 PLUS 1 ") ;
          counter++;
          n.f2.accept(this, argu); System.out.println("\n");
          System.out.print("HSTORE TEMP "+(counter1)+" 0 ");
          
        }
        //check in vtable_fields
        else
        {
          Map.Entry<String,Integer> entry = a.vtable_fields.get(str) ;                   
          // calculate temp0 + offset(id)           
          System.out.println("MOVE TEMP "+counter1+" PLUS TEMP 0 "+entry.getValue());
          System.out.println("HLOAD TEMP "+(counter1+1)+" TEMP "+counter1+" 0");          
          System.out.print("MOVE TEMP "+(counter1+1)+" PLUS TEMP "+(counter1+1)+" TIMES 4 PLUS 1 ") ;
          counter+=2 ;                                    
          n.f2.accept(this, argu);System.out.println("\n");
          System.out.print("HSTORE TEMP "+(counter1+1)+" 0 ");
        }           
      }
      
      n.f0.accept(this, argu);      
      n.f1.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println("\n");
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      /*
      cjump expr label
      stmts
      label : no-op
      */
      int label = label_counter ;label_counter++ ;
      System.out.print("CJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print(" L"+label);System.out.println("\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("L"+label+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      /*
        cjump expr label1
        stmt code
        jump label2
        label1 no-op
        stmt code
        label2 no-op
      */
      int label1=label_counter,label2=label1+1 ;
      label_counter+=2 ;
      System.out.print("CJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print(" L"+label1);System.out.println("\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+label2);
      System.out.println("L"+label1+" NOOP");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println("L"+label2+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      
      /*
        label1 :  cjump expr label2
        stmt code
        jump l1
        label2: no-op
      */
      int label1=label_counter,label2=label1+1 ;
      label_counter+=2 ;
      System.out.print(" L"+label1+" CJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print(" L"+label2) ;System.out.println("\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+label1) ;
      System.out.println(" L"+label2+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.print("PRINT ");
      n.f2.accept(this, argu);
      System.out.println("\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;      
      n.f1.accept(this, argu);      
      /*
      begin
        move temp , 0
        cjump cond1 l1
        cjump cond2 l1
        move temp 1         
        l1: return temp
      end
      */
      int counter1=counter;counter++;
      System.out.println("BEGIN");
      System.out.println("MOVE TEMP "+counter1+" 0");
      System.out.print("CJUMP ");
      n.f0.accept(this, argu);
      System.out.println(" L"+label_counter);
      System.out.print("CJUMP ");
      n.f2.accept(this, argu);
      System.out.print(" L"+label_counter); System.out.println("\n");
      System.out.println("MOVE TEMP "+counter1+" 1");      
      System.out.println("L"+label_counter+" NOOP");
      System.out.println("RETURN TEMP "+counter1+"\n END");
      label_counter++ ;
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      /*
      begin
        move temp 1
        cjump minus 1 cond1 l1
        cjump minus 1 cond2 l1
        move temp 0
        l1 :return temp 
      end
      */
      int counter1=counter ;counter++;
      System.out.println("BEGIN");
      System.out.println("MOVE TEMP "+counter1+" 1");  
      System.out.print("CJUMP MINUS 1 ");
      n.f0.accept(this, argu);
      System.out.println(" L"+label_counter);
      System.out.println("CJUMP MINUS 1 ");
      n.f2.accept(this, argu);
      System.out.println(" L"+label_counter);
      System.out.println("MOVE TEMP "+counter1+" 0");
      System.out.println("L"+label_counter+" NOOP");
      System.out.println("RETURN TEMP "+counter1+"\n END");
      label_counter++ ;
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      System.out.print(" LE ") ;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("\n");
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      System.out.print(" NE ") ;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("\n");
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      System.out.print(" PLUS ") ;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("\n");
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      System.out.print(" MINUS ") ;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      System.out.print(" TIMES ") ;
      n.f0.accept(this, argu);System.out.print(" ");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);System.out.print("\n");
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      // TODO:divide by 0 error
      System.out.println(" DIV ") ;
      n.f0.accept(this, argu);System.out.print(" ");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);System.out.print("\n");
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;

      //TODO:Check for array indices within bounds
      /*
      	error check:
      	cjump minus 1 le expr size-1 l1
		error
		l1: noop
      */	  
      /*
      begin
      hload temp (array id + 4* (expr2+1)) 0 
      return temp
      end
      */
      int init_counter = counter ;
      counter++ ;
      System.out.print(" BEGIN HLOAD TEMP "+init_counter+" PLUS ");
      n.f0.accept(this, argu);System.out.print(" ");
      n.f1.accept(this, argu);
      System.out.print(" TIMES 4 PLUS 1 ") ;
      n.f2.accept(this, argu);System.out.print("  ");
      System.out.println("0") ;
      System.out.println("RETURN TEMP "+init_counter);
      System.out.println("END");
      n.f3.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      /*
        begin
        hload temp array_id  0
        return temp
        end
      */
      int init_counter = counter ;
      counter++ ;
      System.out.println(" BEGIN ");
      System.out.print("HLOAD TEMP "+init_counter+" ");
      n.f0.accept(this, argu); System.out.print("  ");
      System.out.println("0");
      System.out.print("RETURN TEMP "+init_counter);
      System.out.println("END") ;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      /*
      begin
      move temp1 expr1
      search identifier in (static type of expr1).vtable_method & get offset
      add offset to vtable_method base ptr to get ptr to label      
      hload temp2 ptr 0      
      return call temp2 (temp1 expr_list) 
      end
      */
      int counter1 = counter ,counter2,counter3;
      System.out.println("BEGIN");
      System.out.println("MOVE TEMP "+counter1+" ") ;      
      counter++ ;
      String expr_type  = (String)n.f0.accept(this, argu); 

      ClassType expr_class = st.table.get(expr_type) ;
      n.f1.accept(this, argu);
      String method_name = (String)n.f2.accept(this, argu);
      // System.out.println("DEBUG"+method_name+" "+expr_type) ;

      Map.Entry<String,Integer> entry = expr_class.vtable_methods.get(method_name) ;
      int offset = entry.getValue() ;
      counter2 = counter ;    counter++ ;   counter3 = counter ;   counter++ ;
      System.out.println("HLOAD TEMP "+counter2+" TEMP "+counter1+" 0");
      System.out.println("HLOAD TEMP "+counter3+" TEMP "+counter2+" "+offset);
      System.out.print("RETURN CALL TEMP "+counter3+" ( TEMP "+counter1+" ");
      n.f3.accept(this, argu);System.out.print(" ");
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      System.out.print(" )\n");
      System.out.println("END");
      
      MType method = st.table.get(entry.getKey()).methods.get(method_name) ;
      String ret_type = method.returnType ;

      return (R)ret_type;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;

      if(n.f0.which == 3)
      {
        String str = (String)n.f0.accept(this, argu);
        // System.out.println("DEBUG: "+str);
        //code        
        
        Map.Entry<String,Integer> var =  (Map.Entry<String,Integer>)Generate_id_code(str,1); 
        String x = var.getKey();
        // System.out.println("Type_id: "+x);
        return (R)x ;
      }
      return n.f0.accept(this,argu) ;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      //code
      System.out.println(n.f0.tokenImage) ;
      
      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      //code
      System.out.println(1) ;
      
      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      //code
      System.out.println(0) ;
      
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      //code
      System.out.println("TEMP 0") ;
      return (R)curr_class;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      int counter1=counter ,counter2,counter3=counter1+2;counter+=3 ;
      //code
      System.out.println("BEGIN");
      System.out.print(" MOVE TEMP "+counter3+" ") ;
      n.f3.accept(this, argu);System.out.println("\n") ;
      System.out.print(" MOVE TEMP "+counter1+" TIMES 4 PLUS 1 TEMP "+counter3+" ");System.out.println();
      System.out.println("MOVE TEMP "+(counter1+1)+" HALLOCATE TEMP "+counter1);
      
      /*
        size = allocated size = array size*4 + 4
        hstore base 0 size-4
        iter = 4 
        label 1: cjump le iter size-4 label2   
        hstore plus base iter 0 0 
        iter = iter + 4
        jump label 1
        label 2 : noop
      */
      int label1 = label_counter,label2=label_counter+1;label_counter+=2 ;
      
      System.out.println("HSTORE TEMP "+(counter1+1)+" 0 TEMP "+counter3);  
      counter2 = counter ;counter++ ;
      System.out.println("MOVE TEMP "+counter2+" 4");
      System.out.println("L"+label1+" CJUMP LE TEMP "+counter2+" MINUS TEMP "+counter1+" 4 L"+label2);
      System.out.println("HSTORE PLUS TEMP "+(counter1+1)+" TEMP "+counter2+" 0 0");
      System.out.println("MOVE TEMP "+counter2+" PLUS TEMP "+counter2+" 4");
      System.out.println("JUMP L"+label1);
      System.out.println("L"+label2+" NOOP");

      


      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      System.out.println("RETURN TEMP "+(counter1+1));
      System.out.println("END");
      n.f4.accept(this, argu);
      return (R)"Array";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      //code
      st.table.get(n.f1.f0.tokenImage).Generate_VTable_Code(counter) ;

      counter = counter + 2 ;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R)n.f1.f0.tokenImage;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      //code        
      System.out.println("MINUS 1 ") ;  
      n.f1.accept(this, argu);
      
      return (R)"boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String typ = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      // System.out.println("Type: "+typ);
      return (R)typ;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
